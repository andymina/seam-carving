name: pushok
on: [push]

jobs:
  install-deps:
    name: install-deps
    runs-on: ubuntu-latest
    steps:
      - name: Cache OpenCV
        id: opencv-cache
        uses: actions/cache@v3
        with:
          path: opencv-install
          key: ${{runner.os}}-opencv-cache

      - name: Install OpenCV
        uses: rayandrews/with-opencv-action@v1
        with:
          dir: ./opencv-install
          cached: ${{steps.opencv-cache.outputs.cache-hit}}
          opencv-version: '4.7.0'
          install-deps: false

      - name: Cache Ninja
        id: ninja-cache
        uses: actions/cache@v3
        with:
          path: ninja-install
          key: ${{runner.os}}-ninja-cache

      - name: Install Ninja
        if: steps.cache-ninja.outputs.cache-hit != 'true'
        uses: ashutoshvarma/setup-ninja@v1.1
        with:
          dest: ./ninja-install

  build-debug:
    name: build-debug
    runs-on: ubuntu-latest
    needs: install-deps
    env:
      BUILD_TYPE: Debug
      GENERATOR: Ninja
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3

      - name: Cache OpenCV
        id: opencv-cache
        uses: actions/cache@v3
        with:
          path: opencv-install
          key: ${{runner.os}}-opencv-cache

      - name: Cache Ninja
        id: ninja-cache
        uses: actions/cache@v3
        with:
          path: ninja-install
          key: ${{runner.os}}-ninja-cache

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -G ${{env.GENERATOR}} -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake -B ${{github.workspace}} -t seam_carving
#
#    - name: Build
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
